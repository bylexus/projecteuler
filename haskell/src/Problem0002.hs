module Problem0002 where

{--------------------------------------------------------------------
<p>Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with $1$ and $2$, the first $10$ terms will be:
\$$1, 2, 3, 5, 8, 13, 21, 34, 55, 89, \dots$$</p>
<p>By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.</p>
---------------------------------------------------------------------}
import EulerLib qualified as E

data Problem = P deriving (Show)

instance E.EulerProblem Problem where
  problemNr _ = 2
  title _ = "Even Fibonacci Numbers"
  solution :: Problem -> String
  solution _ = solution
    where
      solution = show $ sum (evenList (fiboTo 4_000_000))

-- | Creates a Fibonacchi sequence by extending the given List
--   up to a certain maximum value in the sequence.
fiboTo :: Integer -> [Integer]
fiboTo max
  | max < 1 = []
  | max == 1 = [1]
  | max == 2 = [1, 2]
  | max > 2 = reverse (_fiboTo [2, 1] max)

-- | internal Helper function to fiboTo:
--   generates a list of fibonacchi elements up to a certain max value,
--   by appending to the front. MUST be started with an empty list
_fiboTo :: [Integer] -> Integer -> [Integer]
_fiboTo lst max = case lst of
  [] -> _fiboTo [2, 1] max
  [_] -> _fiboTo [2, 1] max
  (a : b : xs) ->
    if a + b < max
      then _fiboTo (a + b : lst) max
      else lst

evenList :: [Integer] -> [Integer]
evenList = filter even
