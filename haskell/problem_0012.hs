{--------------------------------------------------------------------
<p>The sequence of triangle numbers is generated by adding the natural numbers. So the $7$<sup>th</sup> triangle number would be $1 + 2 + 3 + 4 + 5 + 6 + 7 = 28$. The first ten terms would be:
\$$1, 3, 6, 10, 15, 21, 28, 36, 45, 55, \dots$$</p>
<p>Let us list the factors of the first seven triangle numbers:</p>
\begin{align}
\mathbf 1 &amp;\colon 1\\
\mathbf 3 &amp;\colon 1,3\\
\mathbf 6 &amp;\colon 1,2,3,6\\
\mathbf{10} &amp;\colon 1,2,5,10\\
\mathbf{15} &amp;\colon 1,3,5,15\\
\mathbf{21} &amp;\colon 1,3,7,21\\
\mathbf{28} &amp;\colon 1,2,4,7,14,28
\end{align}
<p>We can see that $28$ is the first triangle number to have over five divisors.</p>
<p>What is the value of the first triangle number to have over five hundred divisors?</p>
---------------------------------------------------------------------}

import EulerLib qualified as E
import Data.List (nub)

triangleNumber :: Int -> Int
triangleNumber n = (n * (n + 1)) `div` 2

triangleNumbersList :: [Int]
triangleNumbersList = map triangleNumber [1 ..]

allFactors :: Int -> [Int]
allFactors n = (E.unique . concatMap pairDivs) allSmallDivs
  where allSmallDivs = filter (\x -> n `mod` x == 0) (n : [1 .. ceiling (sqrt (fromIntegral n))])
        pairDivs x = [x, n `div` x]

findFirst :: (a -> Bool) -> [a] -> Maybe a
findFirst _ [] = Nothing
findFirst searchFn (x : xs) = if searchFn x then Just x else findFirst searchFn xs

main = do
  let eulerProblem = 12
      moreThanFactors = 500
      solution = findFirst (\tns -> length tns > moreThanFactors) (map allFactors triangleNumbersList)
      out = case solution of
        Nothing -> "No solution"
        Just factors -> show (head factors)
  E.printProblemSolution eulerProblem out
