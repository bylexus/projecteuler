#ifndef EULER_PROBLEM_0002
#define EULER_PROBLEM_0002

#include <iostream>
#include "BaseProblem.h"
/**
 * @see https://projecteuler.net:
 *
 * Even Fibonacci numbers
 * Problem 2
 *
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be:
 *
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
 * find the sum of the even-valued terms.
 */
class Problem0002 : public BaseProblem
{
    protected:
        long a{0};
        long b{1};
        long act{0};
        long sum{0};

        virtual string getTitle() override {
            return "Problem 2 - iterative variant";
        }

        virtual void init() override
        {
            a = 0;
            b = 1;
            act = 0;
            sum = 0;
        }

        virtual void run(long &solution) override
        {
            // instead of using a recursive variant, I calculate it iteratively here, as we don't want to
            // re-calculate the whole sequence again for each new term:
            while (act < 4000000)
            {
                if (act % 2 == 0)
                {
                    sum += act;
                }
                act = a + b;
                a = b;
                b = act;
            }
            solution = sum;
        }
};

#endif
